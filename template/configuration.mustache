/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import { Logger } from 'winston';
import { LogConfiguration } from './authentication';

export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;

    /*Common Parameters*/
    authenticationType?: string;
    url?: string;
    requestHost?: string;
    requestJsonPath?: string;
    merchantID?: string;
    requestType?: string;
    requestTarget?: string;
    requestJsonData?: Record<string, unknown>;

    /* JWT Parameters*/
    keysDirectory?: string;
    keyAlias?: string;
    keyPass?: string;
    keyType?: string;
    keyFilename?: string;
    useHttpClient?: boolean;

    /*HTTP Parameters*/
    /**
     * your shared secret key ID
     * @type {string}
     * @memberof Configuration
     */
    merchantKeyId?: string;
    /**
     * your shared secret key
     * @type {string}
     * @memberof Configuration
     */
    merchantsecretKey?: string;

    /* MetaKey Parameters */
    useMetaKey?: boolean;
    portfolioID?: string;

    /* MutualAuth Parameters */
    enableClientCert?: boolean;
    clientCertDir?: string;
    sslClientCert?: string;
    privateKey?: string;

    runEnvironment?: string;

    /* Intermediate Host */
    intermediateHost?: string;

    solutionId?: string;

    logConfiguration?: LogConfiguration;
  }

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;

    /*Common Parameters*/
    authenticationType?: string;
    url?: string;
    requestHost?: string;
    requestJsonPath?: string;
    merchantID?: string;
    requestType?: string;
    requestTarget?: string;
    requestJsonData?: Record<string, unknown>;

    /* JWT Parameters*/
    keysDirectory?: string;
    keyAlias?: string;
    keyPass?: string;
    keyType?: string;
    keyFilename?: string;
    useHttpClient?: boolean;

    /*HTTP Parameters*/
    /**
     * your shared secret key ID
     * @type {string}
     * @memberof Configuration
     */
    merchantKeyId?: string;
    /**
     * your shared secret key
     * @type {string}
     * @memberof Configuration
     */
    merchantsecretKey?: string;

    /* MetaKey Parameters */
    useMetaKey?: boolean;
    portfolioID?: string;

    /* MutualAuth Parameters */
    enableClientCert?: boolean;
    clientCertDir?: string;
    sslClientCert?: string;
    privateKey?: string;

    runEnvironment?: string;

    /* Intermediate Host */
    intermediateHost?: string;

    solutionId?: string;

    logConfiguration?: LogConfiguration;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.merchantKeyId = param.merchantKeyId;
        this.merchantsecretKey = param.merchantsecretKey;

        /*Common Parameters*/
        this.authenticationType = param.authenticationType;
        this.url;
        this.requestHost;
        this.requestJsonPath = param.requestJsonPath;
        this.merchantID = param.merchantID;
        this.requestType;
        this.requestTarget;
        this.requestJsonData;

        /* JWT Parameters*/
        this.keysDirectory = param.keysDirectory;
        this.keyAlias = param.keyAlias;
        this.keyPass = param.keyPass;
        this.keyType;
        this.keyFilename = param.keyFilename;
        this.useHttpClient;

        /*HTTP Parameters*/
        this.merchantKeyId = param.merchantKeyId;
        this.merchantsecretKey = param.merchantsecretKey;

        /* MetaKey Parameters */
        this.useMetaKey = param.useMetaKey;
        this.portfolioID = param.portfolioID;

        /* MutualAuth Parameters */
        this.enableClientCert = param.enableClientCert;
        this.clientCertDir = param.clientCertDir;
        this.sslClientCert = param.sslClientCert;
        this.privateKey = param.privateKey;

        this.runEnvironment = param.runEnvironment;

        /* Intermediate Host */
        this.intermediateHost = param.intermediateHost;

        this.solutionId = param.solutionId;

        this.logConfiguration = param.logConfiguration;
    }
}
