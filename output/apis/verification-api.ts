/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RiskV1AddressVerificationsPost201Response } from '../models';
import { RiskV1AddressVerificationsPost400Response } from '../models';
import { RiskV1AddressVerificationsPost502Response } from '../models';
import { RiskV1ExportComplianceInquiriesPost201Response } from '../models';
import { RiskV1ExportComplianceInquiriesPost400Response } from '../models';
import { RiskV1ExportComplianceInquiriesPost502Response } from '../models';
import { V1AddressverificationsBody } from '../models';
import { V1ExportcomplianceinquiriesBody } from '../models';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This call checks customer data against specified watch lists to ensure export compliance. 
         * @summary Validate export compliance
         * @param {V1ExportcomplianceinquiriesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateExportCompliance: async (body: V1ExportcomplianceinquiriesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling validateExportCompliance.');
            }
            const localVarPath = `/risk/v1/export-compliance-inquiries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This call verifies that the customer address submitted is valid.
         * @summary Verify customer address
         * @param {V1AddressverificationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCustomerAddress: async (body: V1AddressverificationsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling verifyCustomerAddress.');
            }
            const localVarPath = `/risk/v1/address-verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This call checks customer data against specified watch lists to ensure export compliance. 
         * @summary Validate export compliance
         * @param {V1ExportcomplianceinquiriesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateExportCompliance(body: V1ExportcomplianceinquiriesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RiskV1ExportComplianceInquiriesPost201Response>>> {
            const localVarAxiosArgs = await VerificationApiAxiosParamCreator(configuration).validateExportCompliance(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This call verifies that the customer address submitted is valid.
         * @summary Verify customer address
         * @param {V1AddressverificationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCustomerAddress(body: V1AddressverificationsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RiskV1AddressVerificationsPost201Response>>> {
            const localVarAxiosArgs = await VerificationApiAxiosParamCreator(configuration).verifyCustomerAddress(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This call checks customer data against specified watch lists to ensure export compliance. 
         * @summary Validate export compliance
         * @param {V1ExportcomplianceinquiriesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateExportCompliance(body: V1ExportcomplianceinquiriesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<RiskV1ExportComplianceInquiriesPost201Response>> {
            return VerificationApiFp(configuration).validateExportCompliance(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This call verifies that the customer address submitted is valid.
         * @summary Verify customer address
         * @param {V1AddressverificationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCustomerAddress(body: V1AddressverificationsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<RiskV1AddressVerificationsPost201Response>> {
            return VerificationApiFp(configuration).verifyCustomerAddress(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * This call checks customer data against specified watch lists to ensure export compliance. 
     * @summary Validate export compliance
     * @param {V1ExportcomplianceinquiriesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public async validateExportCompliance(body: V1ExportcomplianceinquiriesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<RiskV1ExportComplianceInquiriesPost201Response>> {
        return VerificationApiFp(this.configuration).validateExportCompliance(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This call verifies that the customer address submitted is valid.
     * @summary Verify customer address
     * @param {V1AddressverificationsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public async verifyCustomerAddress(body: V1AddressverificationsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<RiskV1AddressVerificationsPost201Response>> {
        return VerificationApiFp(this.configuration).verifyCustomerAddress(body, options).then((request) => request(this.axios, this.basePath));
    }
}
