/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Reportingv3ReportDownloadsGet400Response } from '../models';
/**
 * ReportDownloadsApi - axios parameter creator
 * @export
 */
export const ReportDownloadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Download a report using the unique report name and date. 
         * @summary Download a Report
         * @param {string} reportDate Valid date on which to download the report in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**  yyyy-mm-dd For reports that span multiple days, this value would be the end date of the report in the time zone of the report subscription. Example 1: If your report start date is 2020-03-06 and the end date is 2020-03-09, the reportDate passed in the query is 2020-03-09. Example 2: If your report runs from midnight to midnight on 2020-03-09, the reportDate passed in the query is 2020-03-10 
         * @param {string} reportName Name of the report to download
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReport: async (reportDate: string, reportName: string, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportDate' is not null or undefined
            if (reportDate === null || reportDate === undefined) {
                throw new RequiredError('reportDate','Required parameter reportDate was null or undefined when calling downloadReport.');
            }
            // verify required parameter 'reportName' is not null or undefined
            if (reportName === null || reportName === undefined) {
                throw new RequiredError('reportName','Required parameter reportName was null or undefined when calling downloadReport.');
            }
            const localVarPath = `/reporting/v3/report-downloads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (reportDate !== undefined) {
                localVarQueryParameter['reportDate'] = (reportDate as any instanceof Date) ?
                    (reportDate as any).toISOString().substr(0,10) :
                    reportDate;
            }

            if (reportName !== undefined) {
                localVarQueryParameter['reportName'] = reportName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportDownloadsApi - functional programming interface
 * @export
 */
export const ReportDownloadsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Download a report using the unique report name and date. 
         * @summary Download a Report
         * @param {string} reportDate Valid date on which to download the report in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**  yyyy-mm-dd For reports that span multiple days, this value would be the end date of the report in the time zone of the report subscription. Example 1: If your report start date is 2020-03-06 and the end date is 2020-03-09, the reportDate passed in the query is 2020-03-09. Example 2: If your report runs from midnight to midnight on 2020-03-09, the reportDate passed in the query is 2020-03-10 
         * @param {string} reportName Name of the report to download
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadReport(reportDate: string, reportName: string, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReportDownloadsApiAxiosParamCreator(configuration).downloadReport(reportDate, reportName, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportDownloadsApi - factory interface
 * @export
 */
export const ReportDownloadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Download a report using the unique report name and date. 
         * @summary Download a Report
         * @param {string} reportDate Valid date on which to download the report in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**  yyyy-mm-dd For reports that span multiple days, this value would be the end date of the report in the time zone of the report subscription. Example 1: If your report start date is 2020-03-06 and the end date is 2020-03-09, the reportDate passed in the query is 2020-03-09. Example 2: If your report runs from midnight to midnight on 2020-03-09, the reportDate passed in the query is 2020-03-10 
         * @param {string} reportName Name of the report to download
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadReport(reportDate: string, reportName: string, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReportDownloadsApiFp(configuration).downloadReport(reportDate, reportName, organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportDownloadsApi - object-oriented interface
 * @export
 * @class ReportDownloadsApi
 * @extends {BaseAPI}
 */
export class ReportDownloadsApi extends BaseAPI {
    /**
     * Download a report using the unique report name and date. 
     * @summary Download a Report
     * @param {string} reportDate Valid date on which to download the report in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**  yyyy-mm-dd For reports that span multiple days, this value would be the end date of the report in the time zone of the report subscription. Example 1: If your report start date is 2020-03-06 and the end date is 2020-03-09, the reportDate passed in the query is 2020-03-09. Example 2: If your report runs from midnight to midnight on 2020-03-09, the reportDate passed in the query is 2020-03-10 
     * @param {string} reportName Name of the report to download
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportDownloadsApi
     */
    public async downloadReport(reportDate: string, reportName: string, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReportDownloadsApiFp(this.configuration).downloadReport(reportDate, reportName, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}
