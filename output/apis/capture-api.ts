/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { IdCapturesBody } from '../models';
import { PtsV2PaymentsCapturesPost201Response } from '../models';
import { PtsV2PaymentsCapturesPost400Response } from '../models';
import { PtsV2PaymentsCapturesPost502Response } from '../models';
/**
 * CaptureApi - axios parameter creator
 * @export
 */
export const CaptureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Include the payment ID in the POST request to capture the payment amount.
         * @summary Capture a Payment
         * @param {IdCapturesBody} body 
         * @param {string} id The payment ID returned from a previous payment request. This ID links the capture to the payment. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment: async (body: IdCapturesBody, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling capturePayment.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling capturePayment.');
            }
            const localVarPath = `/pts/v2/payments/{id}/captures`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaptureApi - functional programming interface
 * @export
 */
export const CaptureApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Include the payment ID in the POST request to capture the payment amount.
         * @summary Capture a Payment
         * @param {IdCapturesBody} body 
         * @param {string} id The payment ID returned from a previous payment request. This ID links the capture to the payment. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async capturePayment(body: IdCapturesBody, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PtsV2PaymentsCapturesPost201Response>>> {
            const localVarAxiosArgs = await CaptureApiAxiosParamCreator(configuration).capturePayment(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaptureApi - factory interface
 * @export
 */
export const CaptureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Include the payment ID in the POST request to capture the payment amount.
         * @summary Capture a Payment
         * @param {IdCapturesBody} body 
         * @param {string} id The payment ID returned from a previous payment request. This ID links the capture to the payment. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async capturePayment(body: IdCapturesBody, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PtsV2PaymentsCapturesPost201Response>> {
            return CaptureApiFp(configuration).capturePayment(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaptureApi - object-oriented interface
 * @export
 * @class CaptureApi
 * @extends {BaseAPI}
 */
export class CaptureApi extends BaseAPI {
    /**
     * Include the payment ID in the POST request to capture the payment amount.
     * @summary Capture a Payment
     * @param {IdCapturesBody} body 
     * @param {string} id The payment ID returned from a previous payment request. This ID links the capture to the payment. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptureApi
     */
    public async capturePayment(body: IdCapturesBody, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PtsV2PaymentsCapturesPost201Response>> {
        return CaptureApiFp(this.configuration).capturePayment(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
