/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ReportingV3ReportDefinitionsGet200Response } from '../models';
import { ReportingV3ReportDefinitionsGet400Response } from '../models';
import { ReportingV3ReportDefinitionsNameGet200Response } from '../models';
import { ReportingV3ReportDefinitionsNameGet400Response } from '../models';
/**
 * ReportDefinitionsApi - axios parameter creator
 * @export
 */
export const ReportDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View the attributes of an individual report type. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation/) 
         * @summary Get Report Definition
         * @param {string} reportDefinitionName Name of the Report definition to retrieve
         * @param {string} [subscriptionType] The subscription type for which report definition is required. By default the type will be CUSTOM. Valid Values: - CLASSIC - CUSTOM - STANDARD 
         * @param {string} [reportMimeType] The format for which the report definition is required. By default the value will be CSV. Valid Values: - application/xml - text/csv 
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceInfoByReportDefinition: async (reportDefinitionName: string, subscriptionType?: string, reportMimeType?: string, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportDefinitionName' is not null or undefined
            if (reportDefinitionName === null || reportDefinitionName === undefined) {
                throw new RequiredError('reportDefinitionName','Required parameter reportDefinitionName was null or undefined when calling getResourceInfoByReportDefinition.');
            }
            const localVarPath = `/reporting/v3/report-definitions/{reportDefinitionName}`
                .replace(`{${"reportDefinitionName"}}`, encodeURIComponent(String(reportDefinitionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subscriptionType !== undefined) {
                localVarQueryParameter['subscriptionType'] = subscriptionType;
            }

            if (reportMimeType !== undefined) {
                localVarQueryParameter['reportMimeType'] = reportMimeType;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * View a list of supported reports and their attributes before subscribing to them. 
         * @summary Get Reporting Resource Information
         * @param {string} [subscriptionType] Valid Values: - CLASSIC - CUSTOM - STANDARD 
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceV2Info: async (subscriptionType?: string, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reporting/v3/report-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subscriptionType !== undefined) {
                localVarQueryParameter['subscriptionType'] = subscriptionType;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportDefinitionsApi - functional programming interface
 * @export
 */
export const ReportDefinitionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * View the attributes of an individual report type. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation/) 
         * @summary Get Report Definition
         * @param {string} reportDefinitionName Name of the Report definition to retrieve
         * @param {string} [subscriptionType] The subscription type for which report definition is required. By default the type will be CUSTOM. Valid Values: - CLASSIC - CUSTOM - STANDARD 
         * @param {string} [reportMimeType] The format for which the report definition is required. By default the value will be CSV. Valid Values: - application/xml - text/csv 
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceInfoByReportDefinition(reportDefinitionName: string, subscriptionType?: string, reportMimeType?: string, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReportingV3ReportDefinitionsNameGet200Response>>> {
            const localVarAxiosArgs = await ReportDefinitionsApiAxiosParamCreator(configuration).getResourceInfoByReportDefinition(reportDefinitionName, subscriptionType, reportMimeType, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View a list of supported reports and their attributes before subscribing to them. 
         * @summary Get Reporting Resource Information
         * @param {string} [subscriptionType] Valid Values: - CLASSIC - CUSTOM - STANDARD 
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceV2Info(subscriptionType?: string, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReportingV3ReportDefinitionsGet200Response>>> {
            const localVarAxiosArgs = await ReportDefinitionsApiAxiosParamCreator(configuration).getResourceV2Info(subscriptionType, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportDefinitionsApi - factory interface
 * @export
 */
export const ReportDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * View the attributes of an individual report type. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation/) 
         * @summary Get Report Definition
         * @param {string} reportDefinitionName Name of the Report definition to retrieve
         * @param {string} [subscriptionType] The subscription type for which report definition is required. By default the type will be CUSTOM. Valid Values: - CLASSIC - CUSTOM - STANDARD 
         * @param {string} [reportMimeType] The format for which the report definition is required. By default the value will be CSV. Valid Values: - application/xml - text/csv 
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceInfoByReportDefinition(reportDefinitionName: string, subscriptionType?: string, reportMimeType?: string, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ReportingV3ReportDefinitionsNameGet200Response>> {
            return ReportDefinitionsApiFp(configuration).getResourceInfoByReportDefinition(reportDefinitionName, subscriptionType, reportMimeType, organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * View a list of supported reports and their attributes before subscribing to them. 
         * @summary Get Reporting Resource Information
         * @param {string} [subscriptionType] Valid Values: - CLASSIC - CUSTOM - STANDARD 
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceV2Info(subscriptionType?: string, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ReportingV3ReportDefinitionsGet200Response>> {
            return ReportDefinitionsApiFp(configuration).getResourceV2Info(subscriptionType, organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportDefinitionsApi - object-oriented interface
 * @export
 * @class ReportDefinitionsApi
 * @extends {BaseAPI}
 */
export class ReportDefinitionsApi extends BaseAPI {
    /**
     * View the attributes of an individual report type. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation/) 
     * @summary Get Report Definition
     * @param {string} reportDefinitionName Name of the Report definition to retrieve
     * @param {string} [subscriptionType] The subscription type for which report definition is required. By default the type will be CUSTOM. Valid Values: - CLASSIC - CUSTOM - STANDARD 
     * @param {string} [reportMimeType] The format for which the report definition is required. By default the value will be CSV. Valid Values: - application/xml - text/csv 
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportDefinitionsApi
     */
    public async getResourceInfoByReportDefinition(reportDefinitionName: string, subscriptionType?: string, reportMimeType?: string, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReportingV3ReportDefinitionsNameGet200Response>> {
        return ReportDefinitionsApiFp(this.configuration).getResourceInfoByReportDefinition(reportDefinitionName, subscriptionType, reportMimeType, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * View a list of supported reports and their attributes before subscribing to them. 
     * @summary Get Reporting Resource Information
     * @param {string} [subscriptionType] Valid Values: - CLASSIC - CUSTOM - STANDARD 
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportDefinitionsApi
     */
    public async getResourceV2Info(subscriptionType?: string, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReportingV3ReportDefinitionsGet200Response>> {
        return ReportDefinitionsApiFp(this.configuration).getResourceV2Info(subscriptionType, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}
