/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponseDefault } from '../models';
import { V1TokensBody } from '../models';
/**
 * TokenizationApi - axios parameter creator
 * @export
 */
export const TokenizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a token representing the supplied card details. The token replaces card data and can be used as the Subscription ID in the CyberSource Simple Order API or SCMP API. This is an unauthenticated call that you should initiate from your customer’s device or browser.
         * @summary Tokenize Card
         * @param {V1TokensBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenize: async (body: V1TokensBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling tokenize.');
            }
            const localVarPath = `/flex/v1/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenizationApi - functional programming interface
 * @export
 */
export const TokenizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a token representing the supplied card details. The token replaces card data and can be used as the Subscription ID in the CyberSource Simple Order API or SCMP API. This is an unauthenticated call that you should initiate from your customer’s device or browser.
         * @summary Tokenize Card
         * @param {V1TokensBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenize(body: V1TokensBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await TokenizationApiAxiosParamCreator(configuration).tokenize(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TokenizationApi - factory interface
 * @export
 */
export const TokenizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a token representing the supplied card details. The token replaces card data and can be used as the Subscription ID in the CyberSource Simple Order API or SCMP API. This is an unauthenticated call that you should initiate from your customer’s device or browser.
         * @summary Tokenize Card
         * @param {V1TokensBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenize(body: V1TokensBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return TokenizationApiFp(configuration).tokenize(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenizationApi - object-oriented interface
 * @export
 * @class TokenizationApi
 * @extends {BaseAPI}
 */
export class TokenizationApi extends BaseAPI {
    /**
     * Returns a token representing the supplied card details. The token replaces card data and can be used as the Subscription ID in the CyberSource Simple Order API or SCMP API. This is an unauthenticated call that you should initiate from your customer’s device or browser.
     * @summary Tokenize Card
     * @param {V1TokensBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    public async tokenize(body: V1TokensBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return TokenizationApiFp(this.configuration).tokenize(body, options).then((request) => request(this.axios, this.basePath));
    }
}
