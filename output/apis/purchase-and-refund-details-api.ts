/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ReportingV3PurchaseRefundDetailsGet200Response } from '../models';
import { ReportingV3PurchaseRefundDetailsGet400Response } from '../models';
import { ReportingV3PurchaseRefundDetailsGet401Response } from '../models';
import { ReportingV3PurchaseRefundDetailsGet404Response } from '../models';
import { ReportingV3PurchaseRefundDetailsGet500Response } from '../models';
/**
 * PurchaseAndRefundDetailsApi - axios parameter creator
 * @export
 */
export const PurchaseAndRefundDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Download the Purchase and Refund Details report. This report report includes all purchases and refund transactions, as well as all activities related to transactions resulting in an adjustment to the net proceeds. 
         * @summary Get Purchase and Refund Details
         * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {string} [organizationId] Valid Organization Id
         * @param {string} [paymentSubtype] Payment Subtypes.   - **ALL**:  All Payment Subtypes   - **VI** :  Visa   - **MC** :  Master Card   - **AX** :  American Express   - **DI** :  Discover   - **DP** :  Pinless Debit 
         * @param {string} [viewBy] View results by Request Date or Submission Date.   - **requestDate** : Request Date   - **submissionDate**: Submission Date 
         * @param {string} [groupName] Valid CyberSource Group Name.User can define groups using CBAPI and Group Management Module in EBC2. Groups are collection of organizationIds
         * @param {number} [offset] Offset of the Purchase and Refund Results.
         * @param {number} [limit] Results count per page. Range(1-2000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseAndRefundDetails: async (startTime: Date, endTime: Date, organizationId?: string, paymentSubtype?: string, viewBy?: string, groupName?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling getPurchaseAndRefundDetails.');
            }
            // verify required parameter 'endTime' is not null or undefined
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling getPurchaseAndRefundDetails.');
            }
            const localVarPath = `/reporting/v3/purchase-refund-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (paymentSubtype !== undefined) {
                localVarQueryParameter['paymentSubtype'] = paymentSubtype;
            }

            if (viewBy !== undefined) {
                localVarQueryParameter['viewBy'] = viewBy;
            }

            if (groupName !== undefined) {
                localVarQueryParameter['groupName'] = groupName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseAndRefundDetailsApi - functional programming interface
 * @export
 */
export const PurchaseAndRefundDetailsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Download the Purchase and Refund Details report. This report report includes all purchases and refund transactions, as well as all activities related to transactions resulting in an adjustment to the net proceeds. 
         * @summary Get Purchase and Refund Details
         * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {string} [organizationId] Valid Organization Id
         * @param {string} [paymentSubtype] Payment Subtypes.   - **ALL**:  All Payment Subtypes   - **VI** :  Visa   - **MC** :  Master Card   - **AX** :  American Express   - **DI** :  Discover   - **DP** :  Pinless Debit 
         * @param {string} [viewBy] View results by Request Date or Submission Date.   - **requestDate** : Request Date   - **submissionDate**: Submission Date 
         * @param {string} [groupName] Valid CyberSource Group Name.User can define groups using CBAPI and Group Management Module in EBC2. Groups are collection of organizationIds
         * @param {number} [offset] Offset of the Purchase and Refund Results.
         * @param {number} [limit] Results count per page. Range(1-2000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseAndRefundDetails(startTime: Date, endTime: Date, organizationId?: string, paymentSubtype?: string, viewBy?: string, groupName?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReportingV3PurchaseRefundDetailsGet200Response>>> {
            const localVarAxiosArgs = await PurchaseAndRefundDetailsApiAxiosParamCreator(configuration).getPurchaseAndRefundDetails(startTime, endTime, organizationId, paymentSubtype, viewBy, groupName, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PurchaseAndRefundDetailsApi - factory interface
 * @export
 */
export const PurchaseAndRefundDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Download the Purchase and Refund Details report. This report report includes all purchases and refund transactions, as well as all activities related to transactions resulting in an adjustment to the net proceeds. 
         * @summary Get Purchase and Refund Details
         * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {string} [organizationId] Valid Organization Id
         * @param {string} [paymentSubtype] Payment Subtypes.   - **ALL**:  All Payment Subtypes   - **VI** :  Visa   - **MC** :  Master Card   - **AX** :  American Express   - **DI** :  Discover   - **DP** :  Pinless Debit 
         * @param {string} [viewBy] View results by Request Date or Submission Date.   - **requestDate** : Request Date   - **submissionDate**: Submission Date 
         * @param {string} [groupName] Valid CyberSource Group Name.User can define groups using CBAPI and Group Management Module in EBC2. Groups are collection of organizationIds
         * @param {number} [offset] Offset of the Purchase and Refund Results.
         * @param {number} [limit] Results count per page. Range(1-2000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseAndRefundDetails(startTime: Date, endTime: Date, organizationId?: string, paymentSubtype?: string, viewBy?: string, groupName?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ReportingV3PurchaseRefundDetailsGet200Response>> {
            return PurchaseAndRefundDetailsApiFp(configuration).getPurchaseAndRefundDetails(startTime, endTime, organizationId, paymentSubtype, viewBy, groupName, offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseAndRefundDetailsApi - object-oriented interface
 * @export
 * @class PurchaseAndRefundDetailsApi
 * @extends {BaseAPI}
 */
export class PurchaseAndRefundDetailsApi extends BaseAPI {
    /**
     * Download the Purchase and Refund Details report. This report report includes all purchases and refund transactions, as well as all activities related to transactions resulting in an adjustment to the net proceeds. 
     * @summary Get Purchase and Refund Details
     * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
     * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
     * @param {string} [organizationId] Valid Organization Id
     * @param {string} [paymentSubtype] Payment Subtypes.   - **ALL**:  All Payment Subtypes   - **VI** :  Visa   - **MC** :  Master Card   - **AX** :  American Express   - **DI** :  Discover   - **DP** :  Pinless Debit 
     * @param {string} [viewBy] View results by Request Date or Submission Date.   - **requestDate** : Request Date   - **submissionDate**: Submission Date 
     * @param {string} [groupName] Valid CyberSource Group Name.User can define groups using CBAPI and Group Management Module in EBC2. Groups are collection of organizationIds
     * @param {number} [offset] Offset of the Purchase and Refund Results.
     * @param {number} [limit] Results count per page. Range(1-2000)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseAndRefundDetailsApi
     */
    public async getPurchaseAndRefundDetails(startTime: Date, endTime: Date, organizationId?: string, paymentSubtype?: string, viewBy?: string, groupName?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReportingV3PurchaseRefundDetailsGet200Response>> {
        return PurchaseAndRefundDetailsApiFp(this.configuration).getPurchaseAndRefundDetails(startTime, endTime, organizationId, paymentSubtype, viewBy, groupName, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
