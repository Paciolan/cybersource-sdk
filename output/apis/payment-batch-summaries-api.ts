/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ReportingV3PaymentBatchSummariesGet200Response } from '../models';
import { ReportingV3PaymentBatchSummariesGet200Response1 } from '../models';
/**
 * PaymentBatchSummariesApi - axios parameter creator
 * @export
 */
export const PaymentBatchSummariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Scope can be either account/merchant or reseller.
         * @summary Get Payment Batch Summary Data
         * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {string} [organizationId] Valid Organization Id
         * @param {string} [rollUp] Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant
         * @param {string} [breakdown] Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.
         * @param {number} [startDayOfWeek] Optional - Start day of week to breakdown data for weeks in a month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentBatchSummary: async (startTime: Date, endTime: Date, organizationId?: string, rollUp?: string, breakdown?: string, startDayOfWeek?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling getPaymentBatchSummary.');
            }
            // verify required parameter 'endTime' is not null or undefined
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling getPaymentBatchSummary.');
            }
            const localVarPath = `/reporting/v3/payment-batch-summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (rollUp !== undefined) {
                localVarQueryParameter['rollUp'] = rollUp;
            }

            if (breakdown !== undefined) {
                localVarQueryParameter['breakdown'] = breakdown;
            }

            if (startDayOfWeek !== undefined) {
                localVarQueryParameter['startDayOfWeek'] = startDayOfWeek;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentBatchSummariesApi - functional programming interface
 * @export
 */
export const PaymentBatchSummariesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Scope can be either account/merchant or reseller.
         * @summary Get Payment Batch Summary Data
         * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {string} [organizationId] Valid Organization Id
         * @param {string} [rollUp] Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant
         * @param {string} [breakdown] Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.
         * @param {number} [startDayOfWeek] Optional - Start day of week to breakdown data for weeks in a month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentBatchSummary(startTime: Date, endTime: Date, organizationId?: string, rollUp?: string, breakdown?: string, startDayOfWeek?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReportingV3PaymentBatchSummariesGet200Response>>> {
            const localVarAxiosArgs = await PaymentBatchSummariesApiAxiosParamCreator(configuration).getPaymentBatchSummary(startTime, endTime, organizationId, rollUp, breakdown, startDayOfWeek, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentBatchSummariesApi - factory interface
 * @export
 */
export const PaymentBatchSummariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Scope can be either account/merchant or reseller.
         * @summary Get Payment Batch Summary Data
         * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
         * @param {string} [organizationId] Valid Organization Id
         * @param {string} [rollUp] Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant
         * @param {string} [breakdown] Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.
         * @param {number} [startDayOfWeek] Optional - Start day of week to breakdown data for weeks in a month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentBatchSummary(startTime: Date, endTime: Date, organizationId?: string, rollUp?: string, breakdown?: string, startDayOfWeek?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ReportingV3PaymentBatchSummariesGet200Response>> {
            return PaymentBatchSummariesApiFp(configuration).getPaymentBatchSummary(startTime, endTime, organizationId, rollUp, breakdown, startDayOfWeek, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentBatchSummariesApi - object-oriented interface
 * @export
 * @class PaymentBatchSummariesApi
 * @extends {BaseAPI}
 */
export class PaymentBatchSummariesApi extends BaseAPI {
    /**
     * Scope can be either account/merchant or reseller.
     * @summary Get Payment Batch Summary Data
     * @param {Date} startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
     * @param {Date} endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
     * @param {string} [organizationId] Valid Organization Id
     * @param {string} [rollUp] Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant
     * @param {string} [breakdown] Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.
     * @param {number} [startDayOfWeek] Optional - Start day of week to breakdown data for weeks in a month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentBatchSummariesApi
     */
    public async getPaymentBatchSummary(startTime: Date, endTime: Date, organizationId?: string, rollUp?: string, breakdown?: string, startDayOfWeek?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReportingV3PaymentBatchSummariesGet200Response>> {
        return PaymentBatchSummariesApiFp(this.configuration).getPaymentBatchSummary(startTime, endTime, organizationId, rollUp, breakdown, startDayOfWeek, options).then((request) => request(this.axios, this.basePath));
    }
}
