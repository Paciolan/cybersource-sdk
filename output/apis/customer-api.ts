/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CustomersCustomerTokenIdBody } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse400 } from '../models';
import { TmsV2CustomersResponse } from '../models';
import { V2CustomersBody } from '../models';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: async (customerTokenId: string, profileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling deleteCustomer.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (customerTokenId: string, profileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling getCustomer.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Customer
         * @param {CustomersCustomerTokenIdBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomer: async (body: CustomersCustomerTokenIdBody, customerTokenId: string, profileId?: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchCustomer.');
            }
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling patchCustomer.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            if (ifMatch !== undefined && ifMatch !== null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a Customer
         * @param {V2CustomersBody} body 
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomer: async (body: V2CustomersBody, profileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postCustomer.');
            }
            const localVarPath = `/tms/v2/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(customerTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).deleteCustomer(customerTokenId, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(customerTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).getCustomer(customerTokenId, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a Customer
         * @param {CustomersCustomerTokenIdBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomer(body: CustomersCustomerTokenIdBody, customerTokenId: string, profileId?: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).patchCustomer(body, customerTokenId, profileId, ifMatch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a Customer
         * @param {V2CustomersBody} body 
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomer(body: V2CustomersBody, profileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TmsV2CustomersResponse>>> {
            const localVarAxiosArgs = await CustomerApiAxiosParamCreator(configuration).postCustomer(body, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(customerTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerApiFp(configuration).deleteCustomer(customerTokenId, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(customerTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return CustomerApiFp(configuration).getCustomer(customerTokenId, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Customer
         * @param {CustomersCustomerTokenIdBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomer(body: CustomersCustomerTokenIdBody, customerTokenId: string, profileId?: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return CustomerApiFp(configuration).patchCustomer(body, customerTokenId, profileId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a Customer
         * @param {V2CustomersBody} body 
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomer(body: V2CustomersBody, profileId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TmsV2CustomersResponse>> {
            return CustomerApiFp(configuration).postCustomer(body, profileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @summary Delete a Customer
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async deleteCustomer(customerTokenId: string, profileId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerApiFp(this.configuration).deleteCustomer(customerTokenId, profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve a Customer
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async getCustomer(customerTokenId: string, profileId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return CustomerApiFp(this.configuration).getCustomer(customerTokenId, profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a Customer
     * @param {CustomersCustomerTokenIdBody} body 
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async patchCustomer(body: CustomersCustomerTokenIdBody, customerTokenId: string, profileId?: string, ifMatch?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return CustomerApiFp(this.configuration).patchCustomer(body, customerTokenId, profileId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a Customer
     * @param {V2CustomersBody} body 
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public async postCustomer(body: V2CustomersBody, profileId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TmsV2CustomersResponse>> {
        return CustomerApiFp(this.configuration).postCustomer(body, profileId, options).then((request) => request(this.axios, this.basePath));
    }
}
