/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4002 } from '../models';
import { InlineResponse502 } from '../models';
import { KeyssymDeletesBody } from '../models';
import { KeyssymVerifiBody } from '../models';
import { KmsV2KeysSymDeletesPost200Response } from '../models';
import { KmsV2KeysSymGet200Response } from '../models';
import { KmsV2KeysSymPost201Response } from '../models';
import { V2KeyssymBody } from '../models';
/**
 * SymmetricKeyManagementApi - axios parameter creator
 * @export
 */
export const SymmetricKeyManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create one or more Shared-Secret Keys 
         * @summary Create Shared-Secret Keys
         * @param {V2KeyssymBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV2SharedSecretKeys: async (body: V2KeyssymBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createV2SharedSecretKeys.');
            }
            const localVarPath = `/kms/v2/keys-sym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create one or more Shared-Secret Keys as per Verifi spec with 32 chars, store digest algo during key generation. 
         * @summary Create Shared-Secret Keys as per verifi spec
         * @param {KeyssymVerifiBody} body 
         * @param {string} vIcDomain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createV2SharedSecretKeysVerifi: async (body: KeyssymVerifiBody, vIcDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createV2SharedSecretKeysVerifi.');
            }
            // verify required parameter 'vIcDomain' is not null or undefined
            if (vIcDomain === null || vIcDomain === undefined) {
                throw new RequiredError('vIcDomain','Required parameter vIcDomain was null or undefined when calling createV2SharedSecretKeysVerifi.');
            }
            const localVarPath = `/kms/v2/keys-sym/verifi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (vIcDomain !== undefined && vIcDomain !== null) {
                localVarHeaderParameter['v-ic-domain'] = String(vIcDomain);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 'Delete one or more Symmetric keys' 
         * @summary Delete one or more Symmetric keys
         * @param {KeyssymDeletesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBulkSymmetricKeys: async (body: KeyssymDeletesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteBulkSymmetricKeys.');
            }
            const localVarPath = `/kms/v2/keys-sym/deletes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves keys details by providing the key id.
         * @summary Retrieves shared secret key details
         * @param {string} keyId Key ID. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyDetails: async (keyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            if (keyId === null || keyId === undefined) {
                throw new RequiredError('keyId','Required parameter keyId was null or undefined when calling getKeyDetails.');
            }
            const localVarPath = `/kms/v2/keys-sym/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SymmetricKeyManagementApi - functional programming interface
 * @export
 */
export const SymmetricKeyManagementApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create one or more Shared-Secret Keys 
         * @summary Create Shared-Secret Keys
         * @param {V2KeyssymBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV2SharedSecretKeys(body: V2KeyssymBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KmsV2KeysSymPost201Response>>> {
            const localVarAxiosArgs = await SymmetricKeyManagementApiAxiosParamCreator(configuration).createV2SharedSecretKeys(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create one or more Shared-Secret Keys as per Verifi spec with 32 chars, store digest algo during key generation. 
         * @summary Create Shared-Secret Keys as per verifi spec
         * @param {KeyssymVerifiBody} body 
         * @param {string} vIcDomain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV2SharedSecretKeysVerifi(body: KeyssymVerifiBody, vIcDomain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KmsV2KeysSymPost201Response>>> {
            const localVarAxiosArgs = await SymmetricKeyManagementApiAxiosParamCreator(configuration).createV2SharedSecretKeysVerifi(body, vIcDomain, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 'Delete one or more Symmetric keys' 
         * @summary Delete one or more Symmetric keys
         * @param {KeyssymDeletesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBulkSymmetricKeys(body: KeyssymDeletesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KmsV2KeysSymDeletesPost200Response>>> {
            const localVarAxiosArgs = await SymmetricKeyManagementApiAxiosParamCreator(configuration).deleteBulkSymmetricKeys(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves keys details by providing the key id.
         * @summary Retrieves shared secret key details
         * @param {string} keyId Key ID. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyDetails(keyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KmsV2KeysSymGet200Response>>> {
            const localVarAxiosArgs = await SymmetricKeyManagementApiAxiosParamCreator(configuration).getKeyDetails(keyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SymmetricKeyManagementApi - factory interface
 * @export
 */
export const SymmetricKeyManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create one or more Shared-Secret Keys 
         * @summary Create Shared-Secret Keys
         * @param {V2KeyssymBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV2SharedSecretKeys(body: V2KeyssymBody, options?: AxiosRequestConfig): Promise<AxiosResponse<KmsV2KeysSymPost201Response>> {
            return SymmetricKeyManagementApiFp(configuration).createV2SharedSecretKeys(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create one or more Shared-Secret Keys as per Verifi spec with 32 chars, store digest algo during key generation. 
         * @summary Create Shared-Secret Keys as per verifi spec
         * @param {KeyssymVerifiBody} body 
         * @param {string} vIcDomain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createV2SharedSecretKeysVerifi(body: KeyssymVerifiBody, vIcDomain: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KmsV2KeysSymPost201Response>> {
            return SymmetricKeyManagementApiFp(configuration).createV2SharedSecretKeysVerifi(body, vIcDomain, options).then((request) => request(axios, basePath));
        },
        /**
         * 'Delete one or more Symmetric keys' 
         * @summary Delete one or more Symmetric keys
         * @param {KeyssymDeletesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBulkSymmetricKeys(body: KeyssymDeletesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<KmsV2KeysSymDeletesPost200Response>> {
            return SymmetricKeyManagementApiFp(configuration).deleteBulkSymmetricKeys(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves keys details by providing the key id.
         * @summary Retrieves shared secret key details
         * @param {string} keyId Key ID. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyDetails(keyId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<KmsV2KeysSymGet200Response>> {
            return SymmetricKeyManagementApiFp(configuration).getKeyDetails(keyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SymmetricKeyManagementApi - object-oriented interface
 * @export
 * @class SymmetricKeyManagementApi
 * @extends {BaseAPI}
 */
export class SymmetricKeyManagementApi extends BaseAPI {
    /**
     * Create one or more Shared-Secret Keys 
     * @summary Create Shared-Secret Keys
     * @param {V2KeyssymBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymmetricKeyManagementApi
     */
    public async createV2SharedSecretKeys(body: V2KeyssymBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<KmsV2KeysSymPost201Response>> {
        return SymmetricKeyManagementApiFp(this.configuration).createV2SharedSecretKeys(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create one or more Shared-Secret Keys as per Verifi spec with 32 chars, store digest algo during key generation. 
     * @summary Create Shared-Secret Keys as per verifi spec
     * @param {KeyssymVerifiBody} body 
     * @param {string} vIcDomain domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymmetricKeyManagementApi
     */
    public async createV2SharedSecretKeysVerifi(body: KeyssymVerifiBody, vIcDomain: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KmsV2KeysSymPost201Response>> {
        return SymmetricKeyManagementApiFp(this.configuration).createV2SharedSecretKeysVerifi(body, vIcDomain, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 'Delete one or more Symmetric keys' 
     * @summary Delete one or more Symmetric keys
     * @param {KeyssymDeletesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymmetricKeyManagementApi
     */
    public async deleteBulkSymmetricKeys(body: KeyssymDeletesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<KmsV2KeysSymDeletesPost200Response>> {
        return SymmetricKeyManagementApiFp(this.configuration).deleteBulkSymmetricKeys(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves keys details by providing the key id.
     * @summary Retrieves shared secret key details
     * @param {string} keyId Key ID. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymmetricKeyManagementApi
     */
    public async getKeyDetails(keyId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<KmsV2KeysSymGet200Response>> {
        return SymmetricKeyManagementApiFp(this.configuration).getKeyDetails(keyId, options).then((request) => request(this.axios, this.basePath));
    }
}
