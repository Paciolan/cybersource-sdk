/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RiskV1AuthenticationResultsPost201Response } from '../models';
import { RiskV1AuthenticationResultsPost400Response } from '../models';
import { RiskV1AuthenticationResultsPost502Response } from '../models';
import { RiskV1AuthenticationSetupsPost201Response } from '../models';
import { RiskV1AuthenticationsPost201Response } from '../models';
import { RiskV1AuthenticationsPost400Response } from '../models';
import { RiskV1AuthenticationsPost400Response1 } from '../models';
import { RiskV1AuthenticationsPost502Response } from '../models';
import { V1AuthenticationresultsBody } from '../models';
import { V1AuthenticationsBody } from '../models';
import { V1AuthenticationsetupsBody } from '../models';
/**
 * PayerAuthenticationApi - axios parameter creator
 * @export
 */
export const PayerAuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This call verifies that the card is enrolled in a card authentication program.
         * @summary Check Payer Auth Enrollment
         * @param {V1AuthenticationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPayerAuthEnrollment: async (body: V1AuthenticationsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling checkPayerAuthEnrollment.');
            }
            const localVarPath = `/risk/v1/authentications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
         * @summary Setup Payer Auth
         * @param {V1AuthenticationsetupsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payerAuthSetup: async (body: V1AuthenticationsetupsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling payerAuthSetup.');
            }
            const localVarPath = `/risk/v1/authentication-setups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
         * @summary Validate Authentication Results
         * @param {V1AuthenticationresultsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateAuthenticationResults: async (body: V1AuthenticationresultsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling validateAuthenticationResults.');
            }
            const localVarPath = `/risk/v1/authentication-results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayerAuthenticationApi - functional programming interface
 * @export
 */
export const PayerAuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This call verifies that the card is enrolled in a card authentication program.
         * @summary Check Payer Auth Enrollment
         * @param {V1AuthenticationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPayerAuthEnrollment(body: V1AuthenticationsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RiskV1AuthenticationsPost201Response>>> {
            const localVarAxiosArgs = await PayerAuthenticationApiAxiosParamCreator(configuration).checkPayerAuthEnrollment(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
         * @summary Setup Payer Auth
         * @param {V1AuthenticationsetupsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payerAuthSetup(body: V1AuthenticationsetupsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RiskV1AuthenticationSetupsPost201Response>>> {
            const localVarAxiosArgs = await PayerAuthenticationApiAxiosParamCreator(configuration).payerAuthSetup(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
         * @summary Validate Authentication Results
         * @param {V1AuthenticationresultsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateAuthenticationResults(body: V1AuthenticationresultsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RiskV1AuthenticationResultsPost201Response>>> {
            const localVarAxiosArgs = await PayerAuthenticationApiAxiosParamCreator(configuration).validateAuthenticationResults(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PayerAuthenticationApi - factory interface
 * @export
 */
export const PayerAuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This call verifies that the card is enrolled in a card authentication program.
         * @summary Check Payer Auth Enrollment
         * @param {V1AuthenticationsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPayerAuthEnrollment(body: V1AuthenticationsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<RiskV1AuthenticationsPost201Response>> {
            return PayerAuthenticationApiFp(configuration).checkPayerAuthEnrollment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
         * @summary Setup Payer Auth
         * @param {V1AuthenticationsetupsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payerAuthSetup(body: V1AuthenticationsetupsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<RiskV1AuthenticationSetupsPost201Response>> {
            return PayerAuthenticationApiFp(configuration).payerAuthSetup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
         * @summary Validate Authentication Results
         * @param {V1AuthenticationresultsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateAuthenticationResults(body: V1AuthenticationresultsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<RiskV1AuthenticationResultsPost201Response>> {
            return PayerAuthenticationApiFp(configuration).validateAuthenticationResults(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayerAuthenticationApi - object-oriented interface
 * @export
 * @class PayerAuthenticationApi
 * @extends {BaseAPI}
 */
export class PayerAuthenticationApi extends BaseAPI {
    /**
     * This call verifies that the card is enrolled in a card authentication program.
     * @summary Check Payer Auth Enrollment
     * @param {V1AuthenticationsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayerAuthenticationApi
     */
    public async checkPayerAuthEnrollment(body: V1AuthenticationsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<RiskV1AuthenticationsPost201Response>> {
        return PayerAuthenticationApiFp(this.configuration).checkPayerAuthEnrollment(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
     * @summary Setup Payer Auth
     * @param {V1AuthenticationsetupsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayerAuthenticationApi
     */
    public async payerAuthSetup(body: V1AuthenticationsetupsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<RiskV1AuthenticationSetupsPost201Response>> {
        return PayerAuthenticationApiFp(this.configuration).payerAuthSetup(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
     * @summary Validate Authentication Results
     * @param {V1AuthenticationresultsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayerAuthenticationApi
     */
    public async validateAuthenticationResults(body: V1AuthenticationresultsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<RiskV1AuthenticationResultsPost201Response>> {
        return PayerAuthenticationApiFp(this.configuration).validateAuthenticationResults(body, options).then((request) => request(this.axios, this.basePath));
    }
}
