/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4001 } from '../models';
import { ReportingV3ReportSubscriptionsGet200Response } from '../models';
import { ReportingV3ReportSubscriptionsGet400Response } from '../models';
import { ReportingV3ReportSubscriptionsNameDelete400Response } from '../models';
import { ReportingV3ReportSubscriptionsNameGet400Response } from '../models';
import { ReportingV3ReportSubscriptionsnameDelete404Response } from '../models';
import { ReportingV3ReportsSubscriptionsNameGet200Response } from '../models';
import { V3PredefinedreportsubscriptionsBody } from '../models';
import { V3ReportsubscriptionsBody } from '../models';
/**
 * ReportSubscriptionsApi - axios parameter creator
 * @export
 */
export const ReportSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create or update an already existing classic or standard subscription. 
         * @summary Create a Standard or Classic Subscription
         * @param {V3PredefinedreportsubscriptionsBody} body Report subscription request payload
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStandardOrClassicSubscription: async (body: V3PredefinedreportsubscriptionsBody, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createStandardOrClassicSubscription.');
            }
            const localVarPath = `/reporting/v3/predefined-report-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a report subscription for your organization. The report name must be unique. 
         * @summary Create Report Subscription for a Report Name by Organization
         * @param {V3ReportsubscriptionsBody} body Report subscription request payload
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (body: V3ReportsubscriptionsBody, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSubscription.');
            }
            const localVarPath = `/reporting/v3/report-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a report subscription for your organization. You must know the unique name of the report you want to delete. 
         * @summary Delete Subscription of a Report Name by Organization
         * @param {string} reportName Name of the Report to Delete
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscription: async (reportName: string, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportName' is not null or undefined
            if (reportName === null || reportName === undefined) {
                throw new RequiredError('reportName','Required parameter reportName was null or undefined when calling deleteSubscription.');
            }
            const localVarPath = `/reporting/v3/report-subscriptions/{reportName}`
                .replace(`{${"reportName"}}`, encodeURIComponent(String(reportName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * View a summary of all report subscriptions. 
         * @summary Get All Subscriptions
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptions: async (organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reporting/v3/report-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * View the details of a report subscription, such as the report format or report frequency, using the report’s unique name. 
         * @summary Get Subscription for Report Name
         * @param {string} reportName Name of the Report to Retrieve
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (reportName: string, organizationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportName' is not null or undefined
            if (reportName === null || reportName === undefined) {
                throw new RequiredError('reportName','Required parameter reportName was null or undefined when calling getSubscription.');
            }
            const localVarPath = `/reporting/v3/report-subscriptions/{reportName}`
                .replace(`{${"reportName"}}`, encodeURIComponent(String(reportName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportSubscriptionsApi - functional programming interface
 * @export
 */
export const ReportSubscriptionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create or update an already existing classic or standard subscription. 
         * @summary Create a Standard or Classic Subscription
         * @param {V3PredefinedreportsubscriptionsBody} body Report subscription request payload
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStandardOrClassicSubscription(body: V3PredefinedreportsubscriptionsBody, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReportSubscriptionsApiAxiosParamCreator(configuration).createStandardOrClassicSubscription(body, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a report subscription for your organization. The report name must be unique. 
         * @summary Create Report Subscription for a Report Name by Organization
         * @param {V3ReportsubscriptionsBody} body Report subscription request payload
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(body: V3ReportsubscriptionsBody, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReportSubscriptionsApiAxiosParamCreator(configuration).createSubscription(body, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a report subscription for your organization. You must know the unique name of the report you want to delete. 
         * @summary Delete Subscription of a Report Name by Organization
         * @param {string} reportName Name of the Report to Delete
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscription(reportName: string, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReportSubscriptionsApiAxiosParamCreator(configuration).deleteSubscription(reportName, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View a summary of all report subscriptions. 
         * @summary Get All Subscriptions
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubscriptions(organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReportingV3ReportSubscriptionsGet200Response>>> {
            const localVarAxiosArgs = await ReportSubscriptionsApiAxiosParamCreator(configuration).getAllSubscriptions(organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View the details of a report subscription, such as the report format or report frequency, using the report’s unique name. 
         * @summary Get Subscription for Report Name
         * @param {string} reportName Name of the Report to Retrieve
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(reportName: string, organizationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReportingV3ReportsSubscriptionsNameGet200Response>>> {
            const localVarAxiosArgs = await ReportSubscriptionsApiAxiosParamCreator(configuration).getSubscription(reportName, organizationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportSubscriptionsApi - factory interface
 * @export
 */
export const ReportSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create or update an already existing classic or standard subscription. 
         * @summary Create a Standard or Classic Subscription
         * @param {V3PredefinedreportsubscriptionsBody} body Report subscription request payload
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStandardOrClassicSubscription(body: V3PredefinedreportsubscriptionsBody, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReportSubscriptionsApiFp(configuration).createStandardOrClassicSubscription(body, organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a report subscription for your organization. The report name must be unique. 
         * @summary Create Report Subscription for a Report Name by Organization
         * @param {V3ReportsubscriptionsBody} body Report subscription request payload
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(body: V3ReportsubscriptionsBody, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReportSubscriptionsApiFp(configuration).createSubscription(body, organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a report subscription for your organization. You must know the unique name of the report you want to delete. 
         * @summary Delete Subscription of a Report Name by Organization
         * @param {string} reportName Name of the Report to Delete
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscription(reportName: string, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReportSubscriptionsApiFp(configuration).deleteSubscription(reportName, organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * View a summary of all report subscriptions. 
         * @summary Get All Subscriptions
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubscriptions(organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ReportingV3ReportSubscriptionsGet200Response>> {
            return ReportSubscriptionsApiFp(configuration).getAllSubscriptions(organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * View the details of a report subscription, such as the report format or report frequency, using the report’s unique name. 
         * @summary Get Subscription for Report Name
         * @param {string} reportName Name of the Report to Retrieve
         * @param {string} [organizationId] Valid Organization Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(reportName: string, organizationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ReportingV3ReportsSubscriptionsNameGet200Response>> {
            return ReportSubscriptionsApiFp(configuration).getSubscription(reportName, organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportSubscriptionsApi - object-oriented interface
 * @export
 * @class ReportSubscriptionsApi
 * @extends {BaseAPI}
 */
export class ReportSubscriptionsApi extends BaseAPI {
    /**
     * Create or update an already existing classic or standard subscription. 
     * @summary Create a Standard or Classic Subscription
     * @param {V3PredefinedreportsubscriptionsBody} body Report subscription request payload
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSubscriptionsApi
     */
    public async createStandardOrClassicSubscription(body: V3PredefinedreportsubscriptionsBody, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReportSubscriptionsApiFp(this.configuration).createStandardOrClassicSubscription(body, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a report subscription for your organization. The report name must be unique. 
     * @summary Create Report Subscription for a Report Name by Organization
     * @param {V3ReportsubscriptionsBody} body Report subscription request payload
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSubscriptionsApi
     */
    public async createSubscription(body: V3ReportsubscriptionsBody, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReportSubscriptionsApiFp(this.configuration).createSubscription(body, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a report subscription for your organization. You must know the unique name of the report you want to delete. 
     * @summary Delete Subscription of a Report Name by Organization
     * @param {string} reportName Name of the Report to Delete
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSubscriptionsApi
     */
    public async deleteSubscription(reportName: string, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReportSubscriptionsApiFp(this.configuration).deleteSubscription(reportName, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * View a summary of all report subscriptions. 
     * @summary Get All Subscriptions
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSubscriptionsApi
     */
    public async getAllSubscriptions(organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReportingV3ReportSubscriptionsGet200Response>> {
        return ReportSubscriptionsApiFp(this.configuration).getAllSubscriptions(organizationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * View the details of a report subscription, such as the report format or report frequency, using the report’s unique name. 
     * @summary Get Subscription for Report Name
     * @param {string} reportName Name of the Report to Retrieve
     * @param {string} [organizationId] Valid Organization Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSubscriptionsApi
     */
    public async getSubscription(reportName: string, organizationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReportingV3ReportsSubscriptionsNameGet200Response>> {
        return ReportSubscriptionsApiFp(this.configuration).getSubscription(reportName, organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}
