/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InvoicesIdBody } from '../models';
import { InvoicingV2InvoicesAllGet200Response } from '../models';
import { InvoicingV2InvoicesAllGet400Response } from '../models';
import { InvoicingV2InvoicesAllGet404Response } from '../models';
import { InvoicingV2InvoicesAllGet502Response } from '../models';
import { InvoicingV2InvoicesCancel200Response } from '../models';
import { InvoicingV2InvoicesCancel400Response } from '../models';
import { InvoicingV2InvoicesCancel404Response } from '../models';
import { InvoicingV2InvoicesCancel502Response } from '../models';
import { InvoicingV2InvoicesGet200Response } from '../models';
import { InvoicingV2InvoicesGet400Response } from '../models';
import { InvoicingV2InvoicesGet404Response } from '../models';
import { InvoicingV2InvoicesGet502Response } from '../models';
import { InvoicingV2InvoicesPost201Response } from '../models';
import { InvoicingV2InvoicesPost202Response } from '../models';
import { InvoicingV2InvoicesPost400Response } from '../models';
import { InvoicingV2InvoicesPost404Response } from '../models';
import { InvoicingV2InvoicesPost502Response } from '../models';
import { InvoicingV2InvoicesPut200Response } from '../models';
import { InvoicingV2InvoicesPut400Response } from '../models';
import { InvoicingV2InvoicesPut404Response } from '../models';
import { InvoicingV2InvoicesPut502Response } from '../models';
import { InvoicingV2InvoicesSend200Response } from '../models';
import { InvoicingV2InvoicesSend400Response } from '../models';
import { InvoicingV2InvoicesSend404Response } from '../models';
import { InvoicingV2InvoicesSend502Response } from '../models';
import { V2InvoicesBody } from '../models';
/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new invoice.
         * @summary Create a New Invoice
         * @param {V2InvoicesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice: async (body: V2InvoicesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createInvoice.');
            }
            const localVarPath = `/invoicing/v2/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of invoices.
         * @summary Get a List of Invoices
         * @param {number} offset Page offset number.
         * @param {number} limit Maximum number of items you would like returned.
         * @param {string} [status] The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllInvoices: async (offset: number, limit: number, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling getAllInvoices.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling getAllInvoices.');
            }
            const localVarPath = `/invoicing/v2/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a specific invoice.
         * @summary Get Invoice Details
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInvoice.');
            }
            const localVarPath = `/invoicing/v2/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an invoice.
         * @summary Cancel an Invoice
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCancelAction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling performCancelAction.');
            }
            const localVarPath = `/invoicing/v2/invoices/{id}/cancelation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an invoice.
         * @summary Send an Invoice
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performSendAction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling performSendAction.');
            }
            const localVarPath = `/invoicing/v2/invoices/{id}/delivery`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an invoice.
         * @summary Update an Invoice
         * @param {InvoicesIdBody} body Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoice: async (body: InvoicesIdBody, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateInvoice.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateInvoice.');
            }
            const localVarPath = `/invoicing/v2/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new invoice.
         * @summary Create a New Invoice
         * @param {V2InvoicesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoice(body: V2InvoicesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InvoicingV2InvoicesPost201Response>>> {
            const localVarAxiosArgs = await InvoicesApiAxiosParamCreator(configuration).createInvoice(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of invoices.
         * @summary Get a List of Invoices
         * @param {number} offset Page offset number.
         * @param {number} limit Maximum number of items you would like returned.
         * @param {string} [status] The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInvoices(offset: number, limit: number, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InvoicingV2InvoicesAllGet200Response>>> {
            const localVarAxiosArgs = await InvoicesApiAxiosParamCreator(configuration).getAllInvoices(offset, limit, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the details of a specific invoice.
         * @summary Get Invoice Details
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InvoicingV2InvoicesGet200Response>>> {
            const localVarAxiosArgs = await InvoicesApiAxiosParamCreator(configuration).getInvoice(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancel an invoice.
         * @summary Cancel an Invoice
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performCancelAction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InvoicingV2InvoicesCancel200Response>>> {
            const localVarAxiosArgs = await InvoicesApiAxiosParamCreator(configuration).performCancelAction(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send an invoice.
         * @summary Send an Invoice
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performSendAction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InvoicingV2InvoicesSend200Response>>> {
            const localVarAxiosArgs = await InvoicesApiAxiosParamCreator(configuration).performSendAction(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an invoice.
         * @summary Update an Invoice
         * @param {InvoicesIdBody} body Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvoice(body: InvoicesIdBody, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InvoicingV2InvoicesPut200Response>>> {
            const localVarAxiosArgs = await InvoicesApiAxiosParamCreator(configuration).updateInvoice(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new invoice.
         * @summary Create a New Invoice
         * @param {V2InvoicesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoice(body: V2InvoicesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InvoicingV2InvoicesPost201Response>> {
            return InvoicesApiFp(configuration).createInvoice(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of invoices.
         * @summary Get a List of Invoices
         * @param {number} offset Page offset number.
         * @param {number} limit Maximum number of items you would like returned.
         * @param {string} [status] The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllInvoices(offset: number, limit: number, status?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InvoicingV2InvoicesAllGet200Response>> {
            return InvoicesApiFp(configuration).getAllInvoices(offset, limit, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a specific invoice.
         * @summary Get Invoice Details
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InvoicingV2InvoicesGet200Response>> {
            return InvoicesApiFp(configuration).getInvoice(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an invoice.
         * @summary Cancel an Invoice
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performCancelAction(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InvoicingV2InvoicesCancel200Response>> {
            return InvoicesApiFp(configuration).performCancelAction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an invoice.
         * @summary Send an Invoice
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performSendAction(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InvoicingV2InvoicesSend200Response>> {
            return InvoicesApiFp(configuration).performSendAction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an invoice.
         * @summary Update an Invoice
         * @param {InvoicesIdBody} body Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
         * @param {string} id The invoice number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvoice(body: InvoicesIdBody, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InvoicingV2InvoicesPut200Response>> {
            return InvoicesApiFp(configuration).updateInvoice(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export class InvoicesApi extends BaseAPI {
    /**
     * Create a new invoice.
     * @summary Create a New Invoice
     * @param {V2InvoicesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public async createInvoice(body: V2InvoicesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InvoicingV2InvoicesPost201Response>> {
        return InvoicesApiFp(this.configuration).createInvoice(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of invoices.
     * @summary Get a List of Invoices
     * @param {number} offset Page offset number.
     * @param {number} limit Maximum number of items you would like returned.
     * @param {string} [status] The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public async getAllInvoices(offset: number, limit: number, status?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InvoicingV2InvoicesAllGet200Response>> {
        return InvoicesApiFp(this.configuration).getAllInvoices(offset, limit, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the details of a specific invoice.
     * @summary Get Invoice Details
     * @param {string} id The invoice number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public async getInvoice(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InvoicingV2InvoicesGet200Response>> {
        return InvoicesApiFp(this.configuration).getInvoice(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancel an invoice.
     * @summary Cancel an Invoice
     * @param {string} id The invoice number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public async performCancelAction(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InvoicingV2InvoicesCancel200Response>> {
        return InvoicesApiFp(this.configuration).performCancelAction(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send an invoice.
     * @summary Send an Invoice
     * @param {string} id The invoice number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public async performSendAction(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InvoicingV2InvoicesSend200Response>> {
        return InvoicesApiFp(this.configuration).performSendAction(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an invoice.
     * @summary Update an Invoice
     * @param {InvoicesIdBody} body Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
     * @param {string} id The invoice number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public async updateInvoice(body: InvoicesIdBody, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InvoicingV2InvoicesPut200Response>> {
        return InvoicesApiFp(this.configuration).updateInvoice(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
