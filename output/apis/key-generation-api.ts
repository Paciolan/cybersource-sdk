/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponseDefault } from '../models';
import { V1KeysBody } from '../models';
/**
 * KeyGenerationApi - axios parameter creator
 * @export
 */
export const KeyGenerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a one-time use public key and key ID to encrypt the card number in the follow-on Tokenize Card request. The key used to encrypt the card number on the cardholder’s device or browser is valid for 15 minutes and must be used to verify the signature in the response message. CyberSource recommends creating a new key for each order. Generating a key is an authenticated request initiated from your servers, prior to requesting to tokenize the card data from your customer’s device or browser.
         * @summary Generate Key
         * @param {V1KeysBody} body 
         * @param {string} format Indicator to enable the receipt of the Keys response in Flex 11+ format (JWT) or legacy (parameter not required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePublicKey: async (body: V1KeysBody, format: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling generatePublicKey.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling generatePublicKey.');
            }
            const localVarPath = `/flex/v1/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyGenerationApi - functional programming interface
 * @export
 */
export const KeyGenerationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Generate a one-time use public key and key ID to encrypt the card number in the follow-on Tokenize Card request. The key used to encrypt the card number on the cardholder’s device or browser is valid for 15 minutes and must be used to verify the signature in the response message. CyberSource recommends creating a new key for each order. Generating a key is an authenticated request initiated from your servers, prior to requesting to tokenize the card data from your customer’s device or browser.
         * @summary Generate Key
         * @param {V1KeysBody} body 
         * @param {string} format Indicator to enable the receipt of the Keys response in Flex 11+ format (JWT) or legacy (parameter not required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePublicKey(body: V1KeysBody, format: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await KeyGenerationApiAxiosParamCreator(configuration).generatePublicKey(body, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KeyGenerationApi - factory interface
 * @export
 */
export const KeyGenerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Generate a one-time use public key and key ID to encrypt the card number in the follow-on Tokenize Card request. The key used to encrypt the card number on the cardholder’s device or browser is valid for 15 minutes and must be used to verify the signature in the response message. CyberSource recommends creating a new key for each order. Generating a key is an authenticated request initiated from your servers, prior to requesting to tokenize the card data from your customer’s device or browser.
         * @summary Generate Key
         * @param {V1KeysBody} body 
         * @param {string} format Indicator to enable the receipt of the Keys response in Flex 11+ format (JWT) or legacy (parameter not required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePublicKey(body: V1KeysBody, format: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return KeyGenerationApiFp(configuration).generatePublicKey(body, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KeyGenerationApi - object-oriented interface
 * @export
 * @class KeyGenerationApi
 * @extends {BaseAPI}
 */
export class KeyGenerationApi extends BaseAPI {
    /**
     * Generate a one-time use public key and key ID to encrypt the card number in the follow-on Tokenize Card request. The key used to encrypt the card number on the cardholder’s device or browser is valid for 15 minutes and must be used to verify the signature in the response message. CyberSource recommends creating a new key for each order. Generating a key is an authenticated request initiated from your servers, prior to requesting to tokenize the card data from your customer’s device or browser.
     * @summary Generate Key
     * @param {V1KeysBody} body 
     * @param {string} format Indicator to enable the receipt of the Keys response in Flex 11+ format (JWT) or legacy (parameter not required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyGenerationApi
     */
    public async generatePublicKey(body: V1KeysBody, format: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return KeyGenerationApiFp(this.configuration).generatePublicKey(body, format, options).then((request) => request(this.axios, this.basePath));
    }
}
