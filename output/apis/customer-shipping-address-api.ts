/* tslint:disable */
/* eslint-disable */
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CustomerTokenIdShippingaddressesBody } from '../models';
import { InlineResponse201 } from '../models';
import { InlineResponse400 } from '../models';
import { ShippingAddressListForCustomer } from '../models';
import { ShippingaddressesShippingAddressTokenIdBody } from '../models';
/**
 * CustomerShippingAddressApi - axios parameter creator
 * @export
 */
export const CustomerShippingAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a Customer Shipping Address
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerShippingAddress: async (customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling deleteCustomerShippingAddress.');
            }
            // verify required parameter 'shippingAddressTokenId' is not null or undefined
            if (shippingAddressTokenId === null || shippingAddressTokenId === undefined) {
                throw new RequiredError('shippingAddressTokenId','Required parameter shippingAddressTokenId was null or undefined when calling deleteCustomerShippingAddress.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}/shipping-addresses/{shippingAddressTokenId}`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)))
                .replace(`{${"shippingAddressTokenId"}}`, encodeURIComponent(String(shippingAddressTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Customer Shipping Address
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerShippingAddress: async (customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling getCustomerShippingAddress.');
            }
            // verify required parameter 'shippingAddressTokenId' is not null or undefined
            if (shippingAddressTokenId === null || shippingAddressTokenId === undefined) {
                throw new RequiredError('shippingAddressTokenId','Required parameter shippingAddressTokenId was null or undefined when calling getCustomerShippingAddress.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}/shipping-addresses/{shippingAddressTokenId}`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)))
                .replace(`{${"shippingAddressTokenId"}}`, encodeURIComponent(String(shippingAddressTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Shipping Addresses for a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {number} [offset] Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
         * @param {number} [limit] The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerShippingAddressesList: async (customerTokenId: string, profileId?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling getCustomerShippingAddressesList.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}/shipping-addresses`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Customer Shipping Address
         * @param {ShippingaddressesShippingAddressTokenIdBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomersShippingAddress: async (body: ShippingaddressesShippingAddressTokenIdBody, customerTokenId: string, shippingAddressTokenId: string, profileId?: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchCustomersShippingAddress.');
            }
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling patchCustomersShippingAddress.');
            }
            // verify required parameter 'shippingAddressTokenId' is not null or undefined
            if (shippingAddressTokenId === null || shippingAddressTokenId === undefined) {
                throw new RequiredError('shippingAddressTokenId','Required parameter shippingAddressTokenId was null or undefined when calling patchCustomersShippingAddress.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}/shipping-addresses/{shippingAddressTokenId}`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)))
                .replace(`{${"shippingAddressTokenId"}}`, encodeURIComponent(String(shippingAddressTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            if (ifMatch !== undefined && ifMatch !== null) {
                localVarHeaderParameter['if-match'] = String(ifMatch);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Include an existing TMS Customer token id in the request URI. * A Customer token can be created by calling: **POST *_/tms/v2/customers*** 
         * @summary Create a Customer Shipping Address
         * @param {CustomerTokenIdShippingaddressesBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerShippingAddress: async (body: CustomerTokenIdShippingaddressesBody, customerTokenId: string, profileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postCustomerShippingAddress.');
            }
            // verify required parameter 'customerTokenId' is not null or undefined
            if (customerTokenId === null || customerTokenId === undefined) {
                throw new RequiredError('customerTokenId','Required parameter customerTokenId was null or undefined when calling postCustomerShippingAddress.');
            }
            const localVarPath = `/tms/v2/customers/{customerTokenId}/shipping-addresses`
                .replace(`{${"customerTokenId"}}`, encodeURIComponent(String(customerTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined && profileId !== null) {
                localVarHeaderParameter['profile-id'] = String(profileId);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerShippingAddressApi - functional programming interface
 * @export
 */
export const CustomerShippingAddressApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a Customer Shipping Address
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerShippingAddress(customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CustomerShippingAddressApiAxiosParamCreator(configuration).deleteCustomerShippingAddress(customerTokenId, shippingAddressTokenId, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve a Customer Shipping Address
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerShippingAddress(customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await CustomerShippingAddressApiAxiosParamCreator(configuration).getCustomerShippingAddress(customerTokenId, shippingAddressTokenId, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Shipping Addresses for a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {number} [offset] Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
         * @param {number} [limit] The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerShippingAddressesList(customerTokenId: string, profileId?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ShippingAddressListForCustomer>>> {
            const localVarAxiosArgs = await CustomerShippingAddressApiAxiosParamCreator(configuration).getCustomerShippingAddressesList(customerTokenId, profileId, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a Customer Shipping Address
         * @param {ShippingaddressesShippingAddressTokenIdBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomersShippingAddress(body: ShippingaddressesShippingAddressTokenIdBody, customerTokenId: string, shippingAddressTokenId: string, profileId?: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await CustomerShippingAddressApiAxiosParamCreator(configuration).patchCustomersShippingAddress(body, customerTokenId, shippingAddressTokenId, profileId, ifMatch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Include an existing TMS Customer token id in the request URI. * A Customer token can be created by calling: **POST *_/tms/v2/customers*** 
         * @summary Create a Customer Shipping Address
         * @param {CustomerTokenIdShippingaddressesBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerShippingAddress(body: CustomerTokenIdShippingaddressesBody, customerTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await CustomerShippingAddressApiAxiosParamCreator(configuration).postCustomerShippingAddress(body, customerTokenId, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomerShippingAddressApi - factory interface
 * @export
 */
export const CustomerShippingAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete a Customer Shipping Address
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerShippingAddress(customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CustomerShippingAddressApiFp(configuration).deleteCustomerShippingAddress(customerTokenId, shippingAddressTokenId, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Customer Shipping Address
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerShippingAddress(customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return CustomerShippingAddressApiFp(configuration).getCustomerShippingAddress(customerTokenId, shippingAddressTokenId, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Shipping Addresses for a Customer
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {number} [offset] Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
         * @param {number} [limit] The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerShippingAddressesList(customerTokenId: string, profileId?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ShippingAddressListForCustomer>> {
            return CustomerShippingAddressApiFp(configuration).getCustomerShippingAddressesList(customerTokenId, profileId, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Customer Shipping Address
         * @param {ShippingaddressesShippingAddressTokenIdBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} shippingAddressTokenId The TokenId of an shipping address.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomersShippingAddress(body: ShippingaddressesShippingAddressTokenIdBody, customerTokenId: string, shippingAddressTokenId: string, profileId?: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return CustomerShippingAddressApiFp(configuration).patchCustomersShippingAddress(body, customerTokenId, shippingAddressTokenId, profileId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Include an existing TMS Customer token id in the request URI. * A Customer token can be created by calling: **POST *_/tms/v2/customers*** 
         * @summary Create a Customer Shipping Address
         * @param {CustomerTokenIdShippingaddressesBody} body 
         * @param {string} customerTokenId The TokenId of a customer.
         * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerShippingAddress(body: CustomerTokenIdShippingaddressesBody, customerTokenId: string, profileId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return CustomerShippingAddressApiFp(configuration).postCustomerShippingAddress(body, customerTokenId, profileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerShippingAddressApi - object-oriented interface
 * @export
 * @class CustomerShippingAddressApi
 * @extends {BaseAPI}
 */
export class CustomerShippingAddressApi extends BaseAPI {
    /**
     * 
     * @summary Delete a Customer Shipping Address
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} shippingAddressTokenId The TokenId of an shipping address.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerShippingAddressApi
     */
    public async deleteCustomerShippingAddress(customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CustomerShippingAddressApiFp(this.configuration).deleteCustomerShippingAddress(customerTokenId, shippingAddressTokenId, profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve a Customer Shipping Address
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} shippingAddressTokenId The TokenId of an shipping address.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerShippingAddressApi
     */
    public async getCustomerShippingAddress(customerTokenId: string, shippingAddressTokenId: string, profileId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return CustomerShippingAddressApiFp(this.configuration).getCustomerShippingAddress(customerTokenId, shippingAddressTokenId, profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List Shipping Addresses for a Customer
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {number} [offset] Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param {number} [limit] The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerShippingAddressApi
     */
    public async getCustomerShippingAddressesList(customerTokenId: string, profileId?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ShippingAddressListForCustomer>> {
        return CustomerShippingAddressApiFp(this.configuration).getCustomerShippingAddressesList(customerTokenId, profileId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a Customer Shipping Address
     * @param {ShippingaddressesShippingAddressTokenIdBody} body 
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} shippingAddressTokenId The TokenId of an shipping address.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {string} [ifMatch] Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerShippingAddressApi
     */
    public async patchCustomersShippingAddress(body: ShippingaddressesShippingAddressTokenIdBody, customerTokenId: string, shippingAddressTokenId: string, profileId?: string, ifMatch?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return CustomerShippingAddressApiFp(this.configuration).patchCustomersShippingAddress(body, customerTokenId, shippingAddressTokenId, profileId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Include an existing TMS Customer token id in the request URI. * A Customer token can be created by calling: **POST *_/tms/v2/customers*** 
     * @summary Create a Customer Shipping Address
     * @param {CustomerTokenIdShippingaddressesBody} body 
     * @param {string} customerTokenId The TokenId of a customer.
     * @param {string} [profileId] The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerShippingAddressApi
     */
    public async postCustomerShippingAddress(body: CustomerTokenIdShippingaddressesBody, customerTokenId: string, profileId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return CustomerShippingAddressApiFp(this.configuration).postCustomerShippingAddress(body, customerTokenId, profileId, options).then((request) => request(this.axios, this.basePath));
    }
}
